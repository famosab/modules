nextflow_process {

    name "Test Process PARABRICKS_DEEPVARIANT"
    script "../main.nf"
    process "PARABRICKS_DEEPVARIANT"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/deepvariant"

    test("human - bam") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    [], // bam.bai not needed unless using intervals
                    []
                ]
                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("human - bam - intervals") {

        config './nextflow.config'

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'ref'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions
                    ).match() }
            )
        }

    }

    test("human - bam - intervals - gvcf") {

        config './nextflow.config'

        when {
            params {
                 module_args = '--gvcf'
            }
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'ref'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( 
                    process.out.versions,
                    // file(process.out.vcf[0][1]).name // fails with groovy.lang.MissingMethodException: No signature of method: static com.askimed.nf.test.lang.extensions.GlobalMethods.file() is applicable for argument types: (ArrayList) values:
                    ).match() 
                }
            )
        }

    }

    test("human - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    [], // bam.bai not needed unless using intervals
                    []
                ]
                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("human - bam - intervals - gvcf - stub") {

        config './nextflow.config'
        options "-stub"

        when {
            params {
                 module_args = '--gvcf'
            }
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/bam/test2.paired_end.recalibrated.sorted.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/multi_intervals.bed', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/chr21/sequence/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot( process.out ).match() }
            )
        }

    }

}
