nextflow_process {

    name "Test Process PARABRICKS_FQ2BAM"
    script "../main.nf"
    process "PARABRICKS_FQ2BAM"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/fq2bam"
    tag "bwa"
    tag "bwa/index"

    config "./nextflow.config"

    setup {
        run("BWA_INDEX") {
            script "../../../bwa/index/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [ id:'test' ], // meta map
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
                """
            }
        }
    }

    test("SRR389222 - fastq - se") {

        when {
            process {
                """
                input[0] = Channel.of([
				    [ id:'test', single_end:true ], // meta map
				    [
				        file('https://github.com/nf-core/test-datasets/raw/methylseq/testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
				    ]
				])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file('https://github.com/nf-core/test-datasets/raw/methylseq/reference/genome.fa', checkIfExists: true)
                ])
				input[2] = BWA_INDEX.out.index
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    bam(process.out.bam[0][1]).getReadsMD5(),
                    process.out.bai,
                    process.out.versions
                ).match() }
            )
        }
    }

    // test("sarscov2 - fastq.gz - paired-end") {

    //     when {
    //         process {
    //             """
    //             input[0] = [
    //                [ id:'reads', single_end:false],
    //                [
    //                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
    //                    file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true)
    //                ],
    //                []
    //            ]
    //            input[1] = [
    //                [ id: 'interval_file'],
    //                file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
    //            ]
    //            input[2] = [[ id: 'fasta'],[]]
    //            input[3] = [[ id: 'index'],[]]
    //            input[4] = [[ id: 'known_sites'],[]]
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }

    // }

    // test("sarscov2 - fastq.gz - single-end") {

    //     when {
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'reads', single_end:true],
    //                 [file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true)],
    //                 []
    //             ]

    //             input[1] = [
    //                 [ id: 'interval_file'],
    //                 file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
    //             ]
    //             input[2] = [[ id: 'fasta'],[]]
    //             input[3] = [[ id: 'index'],[]]
    //             input[4] = [[ id: 'known_sites'],[]]
    //                 """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }

    // }

    // test("sarscov2 - fastq.gz - single-end - stub") {

    //     options "-stub"

    //     when {
    //         process {
    //             """
    //             input[0] = [
    //                 [ id:'test', single_end:true],
    //                 [file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true)],
    //                 []
    //             ]

    //             input[1] = [
    //                 [ id: 'interval_file'],
    //                 file(params.modules_testdata_base_path + "genomics/sarscov2/genome/genome.fasta", checkIfExists: true)
    //             ]
    //                 """"
    //             input[2] = [[ id: 'fasta'],[]]
    //             input[3] = [[ id: 'index'],[]]
    //             input[4] = [[ id: 'known_sites'],[]]

    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert process.success },
    //             { assert snapshot(process.out).match() }
    //         )
    //     }

    // }

}